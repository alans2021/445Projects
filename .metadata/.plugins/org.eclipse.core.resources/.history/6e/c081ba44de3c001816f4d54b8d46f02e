package MyTreePackage;

public class ComparableBinaryTree <T extends Comparable<?super T>> extends BinaryTree<T> implements ComparableTreeInterface<T>
{
	
	
	@Override
	public T getMax() {
		BinaryNode<T> max = this.getRootNode();
		if(max == null)
			return null;
		
		T data = recMax(max.getLeftChild(), max.getData());
		data = recMax(max.getRightChild(), data);
		return data;
	}
	
	private T recMax(BinaryNode<T> node, T max)
	{
		if(node != null)
		{
			if(node.getData().compareTo(max) > 0)
				max = node.getData();
			max = recMax(node.getLeftChild(), max);
			max = recMax(node.getRightChild(), max);
			return max;
		}
		
		else
			return max;
	}

	@Override
	public T getMin() {
		BinaryNode<T> min = this.getRootNode();
		if(min == null)
			return null;
		
		T data = recMax(min.getLeftChild(), min.getData());
		data = recMax(min.getRightChild(), data);
		return data;
	}
	
	private T recMin(BinaryNode<T> node, T min)
	{
		if(node != null)
		{
			if(node.getData().compareTo(min) < 0)
				min = node.getData();
			min = recMax(node.getLeftChild(), min);
			min = recMax(node.getRightChild(), min);
			return min;
		}
		
		else
			return min;
	}

	@Override
	public boolean isBST() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public T get(int i) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int rank(T data) {
		// TODO Auto-generated method stub
		return 0;
	}

}
